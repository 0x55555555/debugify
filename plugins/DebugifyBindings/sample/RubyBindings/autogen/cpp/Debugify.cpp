// Autogenerated - do not change.
#include "RubyBindings/autogen/cpp/Debugify.h"
#include "bondage/RuntimeHelpersImpl.h"
#include "utility"
#include "tuple"
#include "RubyBinder.h"


using namespace Debugify;


struct Debugify_bar_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< float(*)(int, long) >, &::Debugify::bar, bondage::FunctionCaller> { };
struct Debugify_foo_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Debugify::Test *(*)(int, float) >, &::Debugify::foo, bondage::FunctionCaller> { };

const bondage::Function g_bondage_library_Debugify_methods[] = {
  bondage::FunctionBuilder::build<
    Debugify_bar_overload0_t
    >("bar"),
  bondage::FunctionBuilder::build<
    Debugify_foo_overload0_t
    >("foo")
};


bondage::Library g_bondage_library_Debugify(
  "Debugify",
  g_bondage_library_Debugify_methods,
  2);
namespace Debugify
{
const bondage::Library &bindings()
{
  return g_bondage_library_Debugify;
}
}


// Exposing class ::Debugify::Test
::Debugify::Test * Debugify_Test_Test_overload0(int inputArg0)
{
  auto result = bondage::WrappedClassHelper< ::Debugify::Test >::create(std::forward<int>(inputArg0));
  return result;
}

struct Debugify_Test_Test_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::Debugify::Test *(*)(int) >, &Debugify_Test_Test_overload0, bondage::FunctionCaller> { };
struct Debugify_Test_boink_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Debugify::Test *(::Debugify::Test::*)() >, &::Debugify::Test::boink, bondage::FunctionCaller> { };
struct Debugify_Test_foo_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::Debugify::Test::*)(Debugify::Test *) >, &::Debugify::Test::foo, bondage::FunctionCaller> { };

const bondage::Function Debugify_Test_methods[] = {
  bondage::FunctionBuilder::build<
    Debugify_Test_Test_overload0_t
    >("Test"),
  bondage::FunctionBuilder::build<
    Debugify_Test_boink_overload0_t
    >("boink"),
  bondage::FunctionBuilder::build<
    Debugify_Test_foo_overload0_t
    >("foo")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  Debugify_Test,
  g_bondage_library_Debugify,
  ::Debugify,
  Test,
  void,
  Debugify_Test_methods,
  3);



