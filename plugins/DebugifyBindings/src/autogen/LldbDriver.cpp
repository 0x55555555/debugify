// Autogenerated - do not change.
#include "../../DebugifyBindings/src/autogen/LldbDriver.h"
#include "bondage/RuntimeHelpersImpl.h"
#include "utility"
#include "tuple"
#include "TypeMember.h"
#include "../../DebugifyBindings/ManualBindings/ManualBindings.h"
#include "Process.h"
#include "Thread.h"
#include "FunctionMember.h"
#include "Frame.h"
#include "../../../Eks/EksCore/include/Utilities/XStringRef.h"
#include "Type.h"
#include "Breakpoint.h"
#include "../../../Eks/EksCore/include/Containers/XStringSimple.h"


using namespace LldbDriver;


bondage::Library g_bondage_library_LldbDriver(
  "LldbDriver",
  nullptr,
  0);
namespace LldbDriver
{
const bondage::Library &bindings()
{
  return g_bondage_library_LldbDriver;
}
}


// Exposing class ::LldbDriver::TypeMember
::LldbDriver::TypeMember * LldbDriver_TypeMember_TypeMember_overload0()
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::TypeMember >::create();
  return result;
}

::LldbDriver::TypeMember * LldbDriver_TypeMember_TypeMember_overload1(const LldbDriver::TypeMember & inputArg0)
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::TypeMember >::create(std::forward<const LldbDriver::TypeMember &>(inputArg0));
  return result;
}

struct LldbDriver_TypeMember_TypeMember_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::TypeMember *(*)() >, &LldbDriver_TypeMember_TypeMember_overload0, bondage::FunctionCaller> { };
struct LldbDriver_TypeMember_TypeMember_overload1_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::TypeMember *(*)(const LldbDriver::TypeMember &) >, &LldbDriver_TypeMember_TypeMember_overload1, bondage::FunctionCaller> { };
struct TypeMember_TypeMember_overload_0 : Reflect::FunctionArgCountSelectorBlock<0,
      LldbDriver_TypeMember_TypeMember_overload0_t
      > { };
struct TypeMember_TypeMember_overload_1 : Reflect::FunctionArgCountSelectorBlock<1,
      LldbDriver_TypeMember_TypeMember_overload1_t
      > { };
struct TypeMember_TypeMember_overload : Reflect::FunctionArgumentCountSelector<
    TypeMember_TypeMember_overload_0,
    TypeMember_TypeMember_overload_1
    > { };
struct LldbDriver_TypeMember_bitOffset_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::TypeMember::*)() const >, &::LldbDriver::TypeMember::bitOffset, bondage::FunctionCaller> { };
struct LldbDriver_TypeMember_byteOffset_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::TypeMember::*)() const >, &::LldbDriver::TypeMember::byteOffset, bondage::FunctionCaller> { };
struct LldbDriver_TypeMember_name_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::TypeMember::*)() const >, &::LldbDriver::TypeMember::name, bondage::FunctionCaller> { };
struct LldbDriver_TypeMember_operatore_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::TypeMember &(::LldbDriver::TypeMember::*)(const LldbDriver::TypeMember &) >, &::LldbDriver::TypeMember::operator=, bondage::FunctionCaller> { };
struct LldbDriver_TypeMember_type_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::TypeMember::*)() const >, &::LldbDriver::TypeMember::type, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_TypeMember_methods[] = {
  bondage::FunctionBuilder::buildOverload< TypeMember_TypeMember_overload >("TypeMember"),
  bondage::FunctionBuilder::build<
    LldbDriver_TypeMember_bitOffset_overload0_t
    >("bitOffset"),
  bondage::FunctionBuilder::build<
    LldbDriver_TypeMember_byteOffset_overload0_t
    >("byteOffset"),
  bondage::FunctionBuilder::build<
    LldbDriver_TypeMember_name_overload0_t
    >("name"),
  bondage::FunctionBuilder::build<
    LldbDriver_TypeMember_operatore_overload0_t
    >("operator="),
  bondage::FunctionBuilder::build<
    LldbDriver_TypeMember_type_overload0_t
    >("type")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_TypeMember,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  TypeMember,
  void,
  LldbDriver_TypeMember_methods,
  6);



// Exposing class ::LldbDriver::BreakpointNotifier
struct LldbDriver_BreakpointNotifier_listen_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< int(::LldbDriver::BreakpointNotifier::*)(std::function<void ()> &&) >, &::LldbDriver::BreakpointNotifier::listen, bondage::FunctionCaller> { };
struct LldbDriver_BreakpointNotifier_remove_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::LldbDriver::BreakpointNotifier::*)(int) >, &::LldbDriver::BreakpointNotifier::remove, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_BreakpointNotifier_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_BreakpointNotifier_listen_overload0_t
    >("listen"),
  bondage::FunctionBuilder::build<
    LldbDriver_BreakpointNotifier_remove_overload0_t
    >("remove")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_BreakpointNotifier,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  BreakpointNotifier,
  void,
  LldbDriver_BreakpointNotifier_methods,
  2);



// Exposing class ::LldbDriver::Process
struct LldbDriver_Process_currentState_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Process::State(::LldbDriver::Process::*)() const >, &::LldbDriver::Process::currentState, bondage::FunctionCaller> { };
struct LldbDriver_Process_getStateString_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(*)(LldbDriver::Process::State) >, &::LldbDriver::Process::getStateString, bondage::FunctionCaller> { };
struct LldbDriver_Process_processEvents_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::LldbDriver::Process::*)() >, &::LldbDriver::Process::processEvents, bondage::FunctionCaller> { };
struct LldbDriver_Process_processID_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Process::*)() const >, &::LldbDriver::Process::processID, bondage::FunctionCaller> { };
struct LldbDriver_Process_selectThread_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::LldbDriver::Process::*)(const std::shared_ptr<Thread> &) >, &::LldbDriver::Process::selectThread, bondage::FunctionCaller> { };
struct LldbDriver_Process_selectedThread_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Thread>(::LldbDriver::Process::*)() >, &::LldbDriver::Process::selectedThread, bondage::FunctionCaller> { };
struct LldbDriver_Process_target_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Target>(::LldbDriver::Process::*)() >, &::LldbDriver::Process::target, bondage::FunctionCaller> { };
struct LldbDriver_Process_threadAt_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Thread>(::LldbDriver::Process::*)(size_t) >, &::LldbDriver::Process::threadAt, bondage::FunctionCaller> { };
struct LldbDriver_Process_threadCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Process::*)() >, &::LldbDriver::Process::threadCount, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Process_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Process_currentState_overload0_t
    >("currentState"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_getStateString_overload0_t
    >("getStateString"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_processEvents_overload0_t
    >("processEvents"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_processID_overload0_t
    >("processID"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_selectThread_overload0_t
    >("selectThread"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_selectedThread_overload0_t
    >("selectedThread"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_target_overload0_t
    >("target"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_threadAt_overload0_t
    >("threadAt"),
  bondage::FunctionBuilder::build<
    LldbDriver_Process_threadCount_overload0_t
    >("threadCount")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Process,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Process,
  void,
  LldbDriver_Process_methods,
  9);



// Exposing class ::LldbDriver::FunctionMember
::LldbDriver::FunctionMember * LldbDriver_FunctionMember_FunctionMember_overload0()
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::FunctionMember >::create();
  return result;
}

::LldbDriver::FunctionMember * LldbDriver_FunctionMember_FunctionMember_overload1(const LldbDriver::FunctionMember & inputArg0)
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::FunctionMember >::create(std::forward<const LldbDriver::FunctionMember &>(inputArg0));
  return result;
}

struct LldbDriver_FunctionMember_FunctionMember_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::FunctionMember *(*)() >, &LldbDriver_FunctionMember_FunctionMember_overload0, bondage::FunctionCaller> { };
struct LldbDriver_FunctionMember_FunctionMember_overload1_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::FunctionMember *(*)(const LldbDriver::FunctionMember &) >, &LldbDriver_FunctionMember_FunctionMember_overload1, bondage::FunctionCaller> { };
struct FunctionMember_FunctionMember_overload_0 : Reflect::FunctionArgCountSelectorBlock<0,
      LldbDriver_FunctionMember_FunctionMember_overload0_t
      > { };
struct FunctionMember_FunctionMember_overload_1 : Reflect::FunctionArgCountSelectorBlock<1,
      LldbDriver_FunctionMember_FunctionMember_overload1_t
      > { };
struct FunctionMember_FunctionMember_overload : Reflect::FunctionArgumentCountSelector<
    FunctionMember_FunctionMember_overload_0,
    FunctionMember_FunctionMember_overload_1
    > { };
struct LldbDriver_FunctionMember_argument_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::FunctionMember::*)(size_t) const >, &::LldbDriver::FunctionMember::argument, bondage::FunctionCaller> { };
struct LldbDriver_FunctionMember_argumentCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::FunctionMember::*)() const >, &::LldbDriver::FunctionMember::argumentCount, bondage::FunctionCaller> { };
struct LldbDriver_FunctionMember_name_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::FunctionMember::*)() const >, &::LldbDriver::FunctionMember::name, bondage::FunctionCaller> { };
struct LldbDriver_FunctionMember_operatore_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::FunctionMember &(::LldbDriver::FunctionMember::*)(const LldbDriver::FunctionMember &) >, &::LldbDriver::FunctionMember::operator=, bondage::FunctionCaller> { };
struct LldbDriver_FunctionMember_returnType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::FunctionMember::*)() const >, &::LldbDriver::FunctionMember::returnType, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_FunctionMember_methods[] = {
  bondage::FunctionBuilder::buildOverload< FunctionMember_FunctionMember_overload >("FunctionMember"),
  bondage::FunctionBuilder::build<
    LldbDriver_FunctionMember_argument_overload0_t
    >("argument"),
  bondage::FunctionBuilder::build<
    LldbDriver_FunctionMember_argumentCount_overload0_t
    >("argumentCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_FunctionMember_name_overload0_t
    >("name"),
  bondage::FunctionBuilder::build<
    LldbDriver_FunctionMember_operatore_overload0_t
    >("operator="),
  bondage::FunctionBuilder::build<
    LldbDriver_FunctionMember_returnType_overload0_t
    >("returnType")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_FunctionMember,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  FunctionMember,
  void,
  LldbDriver_FunctionMember_methods,
  6);



// Exposing class ::LldbDriver::Frame
struct LldbDriver_Frame_filename_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::filename, bondage::FunctionCaller> { };
struct LldbDriver_Frame_functionName_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::functionName, bondage::FunctionCaller> { };
struct LldbDriver_Frame_hasLineNumber_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::hasLineNumber, bondage::FunctionCaller> { };
struct LldbDriver_Frame_id_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::id, bondage::FunctionCaller> { };
struct LldbDriver_Frame_isCurrent_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::isCurrent, bondage::FunctionCaller> { };
struct LldbDriver_Frame_lineNumber_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Frame::*)() const >, &::LldbDriver::Frame::lineNumber, bondage::FunctionCaller> { };
struct LldbDriver_Frame_thread_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Thread>(::LldbDriver::Frame::*)() >, &::LldbDriver::Frame::thread, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Frame_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_filename_overload0_t
    >("filename"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_functionName_overload0_t
    >("functionName"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_hasLineNumber_overload0_t
    >("hasLineNumber"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_id_overload0_t
    >("id"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_isCurrent_overload0_t
    >("isCurrent"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_lineNumber_overload0_t
    >("lineNumber"),
  bondage::FunctionBuilder::build<
    LldbDriver_Frame_thread_overload0_t
    >("thread")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Frame,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Frame,
  void,
  LldbDriver_Frame_methods,
  7);



// Exposing class ::LldbDriver::Thread
struct LldbDriver_Thread_frameAt_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Frame(::LldbDriver::Thread::*)(size_t) >, &::LldbDriver::Thread::frameAt, bondage::FunctionCaller> { };
struct LldbDriver_Thread_frameCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Thread::*)() const >, &::LldbDriver::Thread::frameCount, bondage::FunctionCaller> { };
struct LldbDriver_Thread_id_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Thread::*)() const >, &::LldbDriver::Thread::id, bondage::FunctionCaller> { };
struct LldbDriver_Thread_isCurrent_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Thread::*)() const >, &::LldbDriver::Thread::isCurrent, bondage::FunctionCaller> { };
struct LldbDriver_Thread_name_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Thread::*)() const >, &::LldbDriver::Thread::name, bondage::FunctionCaller> { };
struct LldbDriver_Thread_process_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Process>(::LldbDriver::Thread::*)() >, &::LldbDriver::Thread::process, bondage::FunctionCaller> { };
struct LldbDriver_Thread_selectFrame_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::LldbDriver::Thread::*)(const LldbDriver::Frame &) >, &::LldbDriver::Thread::selectFrame, bondage::FunctionCaller> { };
struct LldbDriver_Thread_selectedFrame_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Frame(::LldbDriver::Thread::*)() >, &::LldbDriver::Thread::selectedFrame, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Thread_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_frameAt_overload0_t
    >("frameAt"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_frameCount_overload0_t
    >("frameCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_id_overload0_t
    >("id"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_isCurrent_overload0_t
    >("isCurrent"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_name_overload0_t
    >("name"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_process_overload0_t
    >("process"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_selectFrame_overload0_t
    >("selectFrame"),
  bondage::FunctionBuilder::build<
    LldbDriver_Thread_selectedFrame_overload0_t
    >("selectedFrame")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Thread,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Thread,
  void,
  LldbDriver_Thread_methods,
  8);



// Exposing class ::LldbDriver::Debugger
struct LldbDriver_Debugger_create_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Debugger::Pointer(*)() >, &::LldbDriver::Debugger::create, bondage::FunctionCaller> { };
struct LldbDriver_Debugger_loadTarget_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Target>(::LldbDriver::Debugger::*)(const Eks::StringRef &) >, &::LldbDriver::Debugger::loadTarget, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Debugger_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Debugger_create_overload0_t
    >("create"),
  bondage::FunctionBuilder::build<
    LldbDriver_Debugger_loadTarget_overload0_t
    >("loadTarget")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Debugger,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Debugger,
  void,
  LldbDriver_Debugger_methods,
  2);



// Exposing class ::LldbDriver::CompileUnit
struct LldbDriver_CompileUnit_module_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< const std::shared_ptr<Module> &(::LldbDriver::CompileUnit::*)() const >, &::LldbDriver::CompileUnit::module, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_CompileUnit_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_CompileUnit_module_overload0_t
    >("module")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_CompileUnit,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  CompileUnit,
  void,
  LldbDriver_CompileUnit_methods,
  1);



// Exposing class ::LldbDriver::Type
::LldbDriver::Type * LldbDriver_Type_Type_overload0()
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::Type >::create();
  return result;
}

::LldbDriver::Type * LldbDriver_Type_Type_overload1(const LldbDriver::Type & inputArg0)
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::Type >::create(std::forward<const LldbDriver::Type &>(inputArg0));
  return result;
}

struct LldbDriver_Type_Type_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::Type *(*)() >, &LldbDriver_Type_Type_overload0, bondage::FunctionCaller> { };
struct LldbDriver_Type_Type_overload1_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::Type *(*)(const LldbDriver::Type &) >, &LldbDriver_Type_Type_overload1, bondage::FunctionCaller> { };
struct Type_Type_overload_0 : Reflect::FunctionArgCountSelectorBlock<0,
      LldbDriver_Type_Type_overload0_t
      > { };
struct Type_Type_overload_1 : Reflect::FunctionArgCountSelectorBlock<1,
      LldbDriver_Type_Type_overload1_t
      > { };
struct Type_Type_overload : Reflect::FunctionArgumentCountSelector<
    Type_Type_overload_0,
    Type_Type_overload_1
    > { };
struct LldbDriver_Type_canonicalType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::canonicalType, bondage::FunctionCaller> { };
struct LldbDriver_Type_compileUnit_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<CompileUnit> &(::LldbDriver::Type::*)() >, &::LldbDriver::Type::compileUnit, bondage::FunctionCaller> { };
struct LldbDriver_Type_compileUnit_overload1_t : Reflect::FunctionCall<Reflect::FunctionSignature< const std::shared_ptr<CompileUnit> &(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::compileUnit, bondage::FunctionCaller> { };
struct Type_compileUnit_overload_1 : Reflect::FunctionArgCountSelectorBlock<1, Reflect::FunctionArgumentTypeSelector<
      LldbDriver_Type_compileUnit_overload0_t,
      LldbDriver_Type_compileUnit_overload1_t
      > > { };
struct Type_compileUnit_overload : Reflect::FunctionArgumentCountSelector<
    Type_compileUnit_overload_1
    > { };
struct LldbDriver_Type_dereferencedType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::dereferencedType, bondage::FunctionCaller> { };
struct LldbDriver_Type_directBaseClass_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::TypeMember(::LldbDriver::Type::*)(size_t) const >, &::LldbDriver::Type::directBaseClass, bondage::FunctionCaller> { };
struct LldbDriver_Type_directBaseClassCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::directBaseClassCount, bondage::FunctionCaller> { };
struct LldbDriver_Type_function_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::FunctionMember(::LldbDriver::Type::*)(size_t) const >, &::LldbDriver::Type::function, bondage::FunctionCaller> { };
struct LldbDriver_Type_functionCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::functionCount, bondage::FunctionCaller> { };
struct LldbDriver_Type_help_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::help, bondage::FunctionCaller> { };
struct LldbDriver_Type_isDataStructure_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::isDataStructure, bondage::FunctionCaller> { };
struct LldbDriver_Type_isPointer_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::isPointer, bondage::FunctionCaller> { };
struct LldbDriver_Type_isReference_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::isReference, bondage::FunctionCaller> { };
struct LldbDriver_Type_isTypedef_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::isTypedef, bondage::FunctionCaller> { };
struct LldbDriver_Type_member_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::TypeMember(::LldbDriver::Type::*)(size_t) const >, &::LldbDriver::Type::member, bondage::FunctionCaller> { };
struct LldbDriver_Type_memberCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::memberCount, bondage::FunctionCaller> { };
struct LldbDriver_Type_name_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::name, bondage::FunctionCaller> { };
struct LldbDriver_Type_operatore_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type &(::LldbDriver::Type::*)(const LldbDriver::Type &) >, &::LldbDriver::Type::operator=, bondage::FunctionCaller> { };
struct LldbDriver_Type_pointeeType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::pointeeType, bondage::FunctionCaller> { };
struct LldbDriver_Type_size_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::size, bondage::FunctionCaller> { };
struct LldbDriver_Type_templateArgumentCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::templateArgumentCount, bondage::FunctionCaller> { };
struct LldbDriver_Type_templateArgumentType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::Type::*)(size_t) const >, &::LldbDriver::Type::templateArgumentType, bondage::FunctionCaller> { };
struct LldbDriver_Type_typedefType_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Type(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::typedefType, bondage::FunctionCaller> { };
struct LldbDriver_Type_virtualBaseClass_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::TypeMember(::LldbDriver::Type::*)(size_t) const >, &::LldbDriver::Type::virtualBaseClass, bondage::FunctionCaller> { };
struct LldbDriver_Type_virtualBaseClassCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Type::*)() const >, &::LldbDriver::Type::virtualBaseClassCount, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Type_methods[] = {
  bondage::FunctionBuilder::buildOverload< Type_Type_overload >("Type"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_canonicalType_overload0_t
    >("canonicalType"),
  bondage::FunctionBuilder::buildOverload< Type_compileUnit_overload >("compileUnit"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_dereferencedType_overload0_t
    >("dereferencedType"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_directBaseClass_overload0_t
    >("directBaseClass"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_directBaseClassCount_overload0_t
    >("directBaseClassCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_function_overload0_t
    >("function"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_functionCount_overload0_t
    >("functionCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_help_overload0_t
    >("help"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_isDataStructure_overload0_t
    >("isDataStructure"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_isPointer_overload0_t
    >("isPointer"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_isReference_overload0_t
    >("isReference"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_isTypedef_overload0_t
    >("isTypedef"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_member_overload0_t
    >("member"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_memberCount_overload0_t
    >("memberCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_name_overload0_t
    >("name"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_operatore_overload0_t
    >("operator="),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_pointeeType_overload0_t
    >("pointeeType"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_size_overload0_t
    >("size"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_templateArgumentCount_overload0_t
    >("templateArgumentCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_templateArgumentType_overload0_t
    >("templateArgumentType"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_typedefType_overload0_t
    >("typedefType"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_virtualBaseClass_overload0_t
    >("virtualBaseClass"),
  bondage::FunctionBuilder::build<
    LldbDriver_Type_virtualBaseClassCount_overload0_t
    >("virtualBaseClassCount")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Type,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Type,
  void,
  LldbDriver_Type_methods,
  24);



// Exposing class ::LldbDriver::Module
struct LldbDriver_Module_path_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Module::*)() const >, &::LldbDriver::Module::path, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Module_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Module_path_overload0_t
    >("path")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Module,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Module,
  void,
  LldbDriver_Module_methods,
  1);



// Exposing class ::LldbDriver::Breakpoint
::LldbDriver::Breakpoint * LldbDriver_Breakpoint_Breakpoint_overload0()
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::Breakpoint >::create();
  return result;
}

::LldbDriver::Breakpoint * LldbDriver_Breakpoint_Breakpoint_overload1(const LldbDriver::Breakpoint & inputArg0)
{
  auto result = bondage::WrappedClassHelper< ::LldbDriver::Breakpoint >::create(std::forward<const LldbDriver::Breakpoint &>(inputArg0));
  return result;
}

struct LldbDriver_Breakpoint_Breakpoint_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::Breakpoint *(*)() >, &LldbDriver_Breakpoint_Breakpoint_overload0, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_Breakpoint_overload1_t : Reflect::FunctionCall<Reflect::FunctionSignature< ::LldbDriver::Breakpoint *(*)(const LldbDriver::Breakpoint &) >, &LldbDriver_Breakpoint_Breakpoint_overload1, bondage::FunctionCaller> { };
struct Breakpoint_Breakpoint_overload_0 : Reflect::FunctionArgCountSelectorBlock<0,
      LldbDriver_Breakpoint_Breakpoint_overload0_t
      > { };
struct Breakpoint_Breakpoint_overload_1 : Reflect::FunctionArgCountSelectorBlock<1,
      LldbDriver_Breakpoint_Breakpoint_overload1_t
      > { };
struct Breakpoint_Breakpoint_overload : Reflect::FunctionArgumentCountSelector<
    Breakpoint_Breakpoint_overload_0,
    Breakpoint_Breakpoint_overload_1
    > { };
struct LldbDriver_Breakpoint_enabled_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::Breakpoint::*)() const >, &::LldbDriver::Breakpoint::enabled, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_id_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Breakpoint::*)() const >, &::LldbDriver::Breakpoint::id, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_locationAt_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::BreakpointLocation(::LldbDriver::Breakpoint::*)(size_t) const >, &::LldbDriver::Breakpoint::locationAt, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_locationCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Breakpoint::*)() const >, &::LldbDriver::Breakpoint::locationCount, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_operatore_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Breakpoint &(::LldbDriver::Breakpoint::*)(const LldbDriver::Breakpoint &) >, &::LldbDriver::Breakpoint::operator=, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_setEnabled_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< void(::LldbDriver::Breakpoint::*)(bool) >, &::LldbDriver::Breakpoint::setEnabled, bondage::FunctionCaller> { };
struct LldbDriver_Breakpoint_target_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< const std::shared_ptr<Target> &(::LldbDriver::Breakpoint::*)() >, &::LldbDriver::Breakpoint::target, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Breakpoint_methods[] = {
  bondage::FunctionBuilder::buildOverload< Breakpoint_Breakpoint_overload >("Breakpoint"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_enabled_overload0_t
    >("enabled"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_id_overload0_t
    >("id"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_locationAt_overload0_t
    >("locationAt"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_locationCount_overload0_t
    >("locationCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_operatore_overload0_t
    >("operator="),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_setEnabled_overload0_t
    >("setEnabled"),
  bondage::FunctionBuilder::build<
    LldbDriver_Breakpoint_target_overload0_t
    >("target")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Breakpoint,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Breakpoint,
  void,
  LldbDriver_Breakpoint_methods,
  8);



// Exposing class ::LldbDriver::BreakpointLocation
struct LldbDriver_BreakpointLocation_file_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::BreakpointLocation::*)() const >, &::LldbDriver::BreakpointLocation::file, bondage::FunctionCaller> { };
struct LldbDriver_BreakpointLocation_line_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::BreakpointLocation::*)() const >, &::LldbDriver::BreakpointLocation::line, bondage::FunctionCaller> { };
struct LldbDriver_BreakpointLocation_resolved_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< bool(::LldbDriver::BreakpointLocation::*)() const >, &::LldbDriver::BreakpointLocation::resolved, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_BreakpointLocation_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_BreakpointLocation_file_overload0_t
    >("file"),
  bondage::FunctionBuilder::build<
    LldbDriver_BreakpointLocation_line_overload0_t
    >("line"),
  bondage::FunctionBuilder::build<
    LldbDriver_BreakpointLocation_resolved_overload0_t
    >("resolved")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_BreakpointLocation,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  BreakpointLocation,
  void,
  LldbDriver_BreakpointLocation_methods,
  3);



// Exposing class ::LldbDriver::Target
struct LldbDriver_Target_addBreakpoint_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Breakpoint(::LldbDriver::Target::*)(const Eks::String &, size_t) >, &::LldbDriver::Target::addBreakpoint, bondage::FunctionCaller> { };
struct LldbDriver_Target_breakpointAt_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::Breakpoint(::LldbDriver::Target::*)(size_t) >, &::LldbDriver::Target::breakpointAt, bondage::FunctionCaller> { };
struct LldbDriver_Target_breakpointCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Target::*)() >, &::LldbDriver::Target::breakpointCount, bondage::FunctionCaller> { };
struct LldbDriver_Target_breakpointsChanged_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< LldbDriver::BreakpointNotifier *(::LldbDriver::Target::*)() >, &::LldbDriver::Target::breakpointsChanged, bondage::FunctionCaller> { };
struct LldbDriver_Target_moduleAt_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< std::shared_ptr<Module>(::LldbDriver::Target::*)(size_t) >, &::LldbDriver::Target::moduleAt, bondage::FunctionCaller> { };
struct LldbDriver_Target_moduleCount_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< size_t(::LldbDriver::Target::*)() >, &::LldbDriver::Target::moduleCount, bondage::FunctionCaller> { };
struct LldbDriver_Target_path_overload0_t : Reflect::FunctionCall<Reflect::FunctionSignature< Eks::String(::LldbDriver::Target::*)() const >, &::LldbDriver::Target::path, bondage::FunctionCaller> { };

const bondage::Function LldbDriver_Target_methods[] = {
  bondage::FunctionBuilder::build<
    LldbDriver_Target_addBreakpoint_overload0_t
    >("addBreakpoint"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_breakpointAt_overload0_t
    >("breakpointAt"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_breakpointCount_overload0_t
    >("breakpointCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_breakpointsChanged_overload0_t
    >("breakpointsChanged"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_moduleAt_overload0_t
    >("moduleAt"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_moduleCount_overload0_t
    >("moduleCount"),
  bondage::FunctionBuilder::build<
    LldbDriver_Target_path_overload0_t
    >("path")
};


BONDAGE_IMPLEMENT_EXPOSED_CLASS(
  LldbDriver_Target,
  g_bondage_library_LldbDriver,
  ::LldbDriver,
  Target,
  void,
  LldbDriver_Target_methods,
  7);



